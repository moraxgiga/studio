// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that suggests blog articles based on a user's reading history.
 *
 * - suggestArticles - A function that suggests blog articles.
 * - SuggestArticlesInput - The input type for the suggestArticles function.
 * - SuggestArticlesOutput - The return type for the suggestArticles function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SuggestArticlesInputSchema = z.object({
  readingHistory: z
    .string()
    .describe(
      'A comma separated list of the titles of articles the user has read.'
    ),
});
export type SuggestArticlesInput = z.infer<typeof SuggestArticlesInputSchema>;

const SuggestArticlesOutputSchema = z.object({
  suggestedArticles: z
    .string()
    .describe(
      'A comma separated list of suggested article titles based on the reading history.'
    ),
});
export type SuggestArticlesOutput = z.infer<typeof SuggestArticlesOutputSchema>;

export async function suggestArticles(
  input: SuggestArticlesInput
): Promise<SuggestArticlesOutput> {
  return suggestArticlesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestArticlesPrompt',
  input: {
    schema: z.object({
      readingHistory: z
        .string()
        .describe(
          'A comma separated list of the titles of articles the user has read.'
        ),
    }),
  },
  output: {
    schema: z.object({
      suggestedArticles: z
        .string()
        .describe(
          'A comma separated list of suggested article titles based on the reading history.'
        ),
    }),
  },
  prompt: `You are a blog content recommendation system.

  Based on the user's reading history, suggest other articles they might like.

  Reading History: {{{readingHistory}}}

  Suggested Articles:`,
});

const suggestArticlesFlow = ai.defineFlow<
  typeof SuggestArticlesInputSchema,
  typeof SuggestArticlesOutputSchema
>(
  {
    name: 'suggestArticlesFlow',
    inputSchema: SuggestArticlesInputSchema,
    outputSchema: SuggestArticlesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
